from plaid.exceptions import ApiValueError as ApiValueError
from typing import Any, Optional

class Environment:
    Production: str = ...
    Development: str = ...
    Sandbox: str = ...

JSON_SCHEMA_VALIDATION_KEYWORDS: Any

class Configuration:
    server_index: Any = ...
    server_operation_index: Any = ...
    server_variables: Any = ...
    server_operation_variables: Any = ...
    temp_folder_path: Any = ...
    access_token: Any = ...
    api_key: Any = ...
    api_key_prefix: Any = ...
    refresh_api_key_hook: Any = ...
    username: Any = ...
    password: Any = ...
    discard_unknown_keys: Any = ...
    disabled_client_side_validations: Any = ...
    logger: Any = ...
    logger_stream_handler: Any = ...
    logger_file_handler: Any = ...
    verify_ssl: bool = ...
    ssl_ca_cert: Any = ...
    cert_file: Any = ...
    key_file: Any = ...
    assert_hostname: Any = ...
    connection_pool_maxsize: Any = ...
    proxy: Any = ...
    proxy_headers: Any = ...
    safe_chars_for_path_param: str = ...
    retries: Any = ...
    client_side_validation: bool = ...
    socket_options: Any = ...
    def __init__(self, host: Optional[Any] = ..., api_key: Optional[Any] = ..., api_key_prefix: Optional[Any] = ..., access_token: Optional[Any] = ..., username: Optional[Any] = ..., password: Optional[Any] = ..., discard_unknown_keys: bool = ..., disabled_client_side_validations: str = ..., server_index: Optional[Any] = ..., server_variables: Optional[Any] = ..., server_operation_index: Optional[Any] = ..., server_operation_variables: Optional[Any] = ..., ssl_ca_cert: Optional[Any] = ...) -> None: ...
    def __deepcopy__(self, memo: Any) -> Any: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    @classmethod
    def set_default(cls, default: Any) -> None: ...
    @classmethod
    def get_default_copy(cls) -> Any: ...
    @property
    def logger_file(self) -> Any: ...
    @logger_file.setter
    def logger_file(self, value: Any) -> None: ...
    @property
    def debug(self) -> Any: ...
    @debug.setter
    def debug(self, value: Any) -> None: ...
    @property
    def logger_format(self) -> Any: ...
    @logger_format.setter
    def logger_format(self, value: Any) -> None: ...
    logger_formatter: Any = ...
    def get_api_key_with_prefix(self, identifier: Any, alias: Optional[Any] = ...) -> Any: ...
    def get_basic_auth_token(self) -> Any: ...
    def auth_settings(self) -> Any: ...
    def to_debug_report(self) -> Any: ...
    def get_host_settings(self) -> Any: ...
    def get_host_from_settings(self, index: Any, variables: Optional[Any] = ..., servers: Optional[Any] = ...) -> Any: ...
    @property
    def host(self) -> Any: ...
    @host.setter
    def host(self, value: Any) -> None: ...
