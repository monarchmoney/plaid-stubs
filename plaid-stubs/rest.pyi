import io
from plaid.exceptions import ApiException as ApiException, ApiValueError as ApiValueError, ForbiddenException as ForbiddenException, NotFoundException as NotFoundException, ServiceException as ServiceException, UnauthorizedException as UnauthorizedException
from typing import Any, Optional

logger: Any

class RESTResponse(io.IOBase):
    urllib3_response: Any = ...
    status: Any = ...
    reason: Any = ...
    data: Any = ...
    def __init__(self, resp: Any) -> None: ...
    def getheaders(self) -> Any: ...
    def getheader(self, name: Any, default: Optional[Any] = ...) -> Any: ...

class RESTClientObject:
    pool_manager: Any = ...
    def __init__(self, configuration: Any, pools_size: int = ..., maxsize: Optional[Any] = ...) -> None: ...
    def request(self, method: Any, url: Any, query_params: Optional[Any] = ..., headers: Optional[Any] = ..., body: Optional[Any] = ..., post_params: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def GET(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def HEAD(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def OPTIONS(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., post_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def DELETE(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def POST(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., post_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def PUT(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., post_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def PATCH(self, url: Any, headers: Optional[Any] = ..., query_params: Optional[Any] = ..., post_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
