import io
import typing
from plaid import rest as rest
from plaid.configuration import Configuration as Configuration
from plaid.exceptions import ApiException as ApiException, ApiTypeError as ApiTypeError, ApiValueError as ApiValueError
from plaid.model_utils import ModelComposed as ModelComposed, ModelNormal as ModelNormal, ModelSimple as ModelSimple, check_allowed_values as check_allowed_values, check_validations as check_validations, deserialize_file as deserialize_file, file_type as file_type, model_to_dict as model_to_dict, none_type as none_type, validate_and_convert_types as validate_and_convert_types
from typing import Any, Optional

class ApiClient:
    configuration: Any = ...
    pool_threads: Any = ...
    rest_client: Any = ...
    default_headers: Any = ...
    cookie: Any = ...
    def __init__(self, configuration: Optional[Any] = ..., header_name: Optional[Any] = ..., header_value: Optional[Any] = ..., cookie: Optional[Any] = ..., pool_threads: int = ...) -> None: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def close(self) -> None: ...
    @property
    def pool(self) -> Any: ...
    @property
    def user_agent(self) -> Any: ...
    @user_agent.setter
    def user_agent(self, value: Any) -> None: ...
    def set_default_header(self, header_name: Any, header_value: Any) -> None: ...
    def parameters_to_multipart(self, params: Any, collection_types: Any) -> Any: ...
    @classmethod
    def sanitize_for_serialization(cls, obj: Any) -> Any: ...
    def deserialize(self, response: Any, response_type: Any, _check_type: Any) -> Any: ...
    def call_api(self, resource_path: str, method: str, path_params: typing.Optional[typing.Dict[str, typing.Any]]=..., query_params: typing.Optional[typing.List[typing.Tuple[str, typing.Any]]]=..., header_params: typing.Optional[typing.Dict[str, typing.Any]]=..., body: typing.Optional[typing.Any]=..., post_params: typing.Optional[typing.List[typing.Tuple[str, typing.Any]]]=..., files: typing.Optional[typing.Dict[str, typing.List[io.IOBase]]]=..., response_type: typing.Optional[typing.Tuple[typing.Any]]=..., auth_settings: typing.Optional[typing.List[str]]=..., async_req: typing.Optional[bool]=..., _return_http_data_only: typing.Optional[bool]=..., collection_formats: typing.Optional[typing.Dict[str, str]]=..., _preload_content: bool=..., _request_timeout: typing.Optional[typing.Union[int, typing.Tuple]]=..., _host: typing.Optional[str]=..., _check_type: typing.Optional[bool]=...) -> Any: ...
    def request(self, method: Any, url: Any, query_params: Optional[Any] = ..., headers: Optional[Any] = ..., post_params: Optional[Any] = ..., body: Optional[Any] = ..., _preload_content: bool = ..., _request_timeout: Optional[Any] = ...) -> Any: ...
    def parameters_to_tuples(self, params: Any, collection_formats: Any) -> Any: ...
    @staticmethod
    def get_file_data_and_close_file(file_instance: io.IOBase) -> bytes: ...
    def files_parameters(self, files: typing.Optional[typing.Dict[str, typing.List[io.IOBase]]]=...) -> Any: ...
    def select_header_accept(self, accepts: Any) -> Any: ...
    def select_header_content_type(self, content_types: Any) -> Any: ...
    def update_params_for_auth(self, headers: Any, querys: Any, auth_settings: Any, resource_path: Any, method: Any, body: Any) -> None: ...

class Endpoint:
    settings: Any = ...
    params_map: Any = ...
    validations: Any = ...
    allowed_values: Any = ...
    attribute_map: Any = ...
    location_map: Any = ...
    collection_format_map: Any = ...
    headers_map: Any = ...
    api_client: Any = ...
    callable: Any = ...
    def __init__(self, settings: Optional[Any] = ..., params_map: Optional[Any] = ..., root_map: Optional[Any] = ..., headers_map: Optional[Any] = ..., api_client: Optional[Any] = ..., callable: Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def call_with_http_info(self, **kwargs: Any) -> Any: ...
